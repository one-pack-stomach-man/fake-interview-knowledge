/**
 * http握手过程中 客户端如何验证证书的合法性
 * http 超文本传输协议 位于tcp/ip模型的应用层 通过请求
 * 响应的方式在客户端和服务端之间通信 但是缺少安全性 裸奔 容易被人发现 中间人攻击
 * 
 * 1. 对称加密 A B协商一个同样的数字 这样A和B之间通过这个数字加密 就能实现加密通信 但是因为需要传输这个数字 万一被窃取了 
 *  黑客就知道这个秘钥 就能监听
 * 
 * 2. 非对称加密 为了解决这个问题 A B 心中想一个不同的数字 A B 
 *  同时运用算法 结合某个数字G A发送AG给B B发送BG给A 这样 AB同时生成ABG 即使别人监听到AG和BG 也无法推算到ABG
 * 
 * 3. 但是存在可以冒充中间人的攻击方式 自己冒充A和B 
 *    冒充A 生成A1G1 发送给B 同时接收到BG1 B生成了A1BG1
 *    冒充B 发送B1G1给A 接受A的AG1 A生成了AB1G1
 *    然后中间人接受到的数据 AG1 BG1 发送的数据 A1G1 B1G1 A生成的秘钥AB1G1 B生成的秘钥A1B1G1
 *    所以中间人能生成 AG1B1 A1BG1 就能冒充跟两边的人对接
 * 
 * 4. 解决方案
 *    认证机构
 *    
 *    服务端把自己的公钥传给CA CA用自己生成的秘钥对的私钥加密服务端的公钥 生成数字签名 
 *    CA把服务端的公钥和生成的签名传给客户端 客户端拿到之后 用CA的公钥解密数字签名和收到的公钥进行校验 
 * 
 * http和https的区别
 * http: 超文本传输协议 https: 加密的传输协议
 * hppts需要ssl证书 http不需要 
 * https对seo更友好 并且更安全
 * https标准端口 443 http标准端口80
 * https基于传输层 http基于应用程序层
 * 
 * 
 * 
 */